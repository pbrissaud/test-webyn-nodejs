name: Releasing process
on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  id-token: write
  packages: write 

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: googleapis/release-please-action@v4
        id: release-please
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }}
          config-file: release-please-config.json
          release-type: node
    outputs:
      release_created: ${{ steps.release-please.outputs.release_created }}
      tag_name: ${{ steps.release-please.outputs.tag_name }}
  docker:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: create-release
    if: ${{needs.create-release.outputs.release_created}} 
    outputs:
      image_digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-docker-action@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{vars.REGION}}-docker.pkg.dev/${{vars.PROJECT_ID}}/${{ vars.ARTIFACT_REGISTRY }}/${{ github.event.repository.name }}
          tags: |
            type=semver,pattern={{version}},value=${{needs.create-release.outputs.tag_name}}
            type=semver,pattern={{major}}.{{minor}},value=${{needs.create-release.outputs.tag_name}}
            type=semver,pattern={{major}},value=${{needs.create-release.outputs.tag_name}}

      - name: Login to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.PROVIDER_NAME }}
          service_account: ${{ secrets.SA_EMAIL }}

      - name: Login to Docker Artifact Registry
        id: docker-auth
        uses: docker/login-action@v3
        with:
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
          registry: ${{vars.REGION}}-docker.pkg.dev

      - name: Build and push
        uses: docker/build-push-action@v6
        id: build
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: docker
    outputs:
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.PROVIDER_NAME }}
          service_account: ${{ secrets.SA_EMAIL }}

      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        id: deploy
        with:
          service: ${{ github.event.repository.name }}
          region: ${{vars.REGION}}
          project_id: ${{vars.PROJECT_ID}}
          image: ${{vars.REGION}}-docker.pkg.dev/${{vars.PROJECT_ID}}/${{ vars.ARTIFACT_REGISTRY }}/${{ github.event.repository.name }}@${{needs.docker.outputs.image_digest}}
          no_traffic: true
          
  promote:
    name: Blue-green deployment
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.PROVIDER_NAME }}
          service_account: ${{ secrets.SA_EMAIL }}

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Set green tag to new revision
        id: set-tags
        run: |
          LATEST=$(gcloud run services list --region ${{vars.REGION}} --project ${{vars.PROJECT_ID}} --service=${{github.event.repository.name}} --sort-by="~createTime" --limit=1 --format="value(metadata.name)")
          gcloud run services update-traffic ${{github.event.repository.name}} ---region ${{vars.REGION}} --project ${{vars.PROJECT_ID}} --set-tags green=${LATEST}
          echo "latest=${LATEST}" >> "$GITHUB_OUTPUT"

      - name: Gradually increase traffic
        id: blue-green
        continue-on-error: true
        run: |
          echo ${{ needs.deploy.outputs.url }}
          for traffic in 10 25 50 75 100; do
            echo "Shifting ${traffic}% traffic to the new revision"
            gcloud run services update-traffic ${{github.event.repository.name}} --to-tags green=${traffic} --region ${{vars.REGION}} --project ${{vars.PROJECT_ID}}
            URL=${{ needs.deploy.outputs.url }} k6 run k6s.js
            
            if [ $? -ne 0 ]; then
              echo "k6 tests failed at ${traffic}% traffic, rolling back!"
              exit 1
            fi
          done

      - name: Revert revision if failure
        if: steps['blue-green'].outcome == 'failure'
        run: |
          gcloud run services update-traffic ${{github.event.repository.name}} --to-tags green=0 --region ${{vars.REGION}} --project ${{vars.PROJECT_ID}}

      - name: Swap tags
        if: steps['blue-green'].outcome == 'success'
        run: |
          gcloud run services update-traffic ${{github.event.repository.name}} --region ${{vars.REGION}} --project ${{vars.PROJECT_ID}} --remove-tags blue,green
          gcloud run services update-traffic ${{github.event.repository.name}} ---region ${{vars.REGION}} --project ${{vars.PROJECT_ID}} --set-tags blue=${{steps.set-tags.outputs.latest}}